CourseNo|CourseTitle|TermsOffered|Credits|Instructor|Description
CSC 131|Recreational Graphics|1|4.0|Thaddeus Pawlicki|A hands on introduction to 3D computer graphics and animation techniques taught from a user point of view. Topics include 3D modeling, animation, and simulation. Assessment based on projects. No written exams. If the course is closed, DO NOT email the professor. Fill out this form to be added to the waitlist: https://goo.gl/forms/IyFoIfjrtISvJls62. Additional places, if any, will become available automatically.
CSC 161|Intro to Programming|1|4.0|Richard Sarkis|Hands-on introduction to programming using the Python programming language. Covers basic programming constructs including statements, expressions, variables, conditionals, iteration, and functions, as well as object-oriented programming and graphics. Recommended for non-majors, and/or students with less math and science background. Lab and workshop required.
CSC 170|Intro to Web Development|1|4.0|Robert Kostin|An introduction to the World Wide Web and related technologies. Topics include HTML5 and CSS3, Progressive Enhancement, and Web page design. Emphasis is placed on fundamentals, industry standards and best practices. Additional topics include: web site construction techniques, mobile design issues, and Search Engine Optimization (SEO). Programming with JavaScript will be introduced.
CSC 171|Intro to Computer Science|1|4.0|Adam Purtee|Hands-on introduction to programming using the Java programming language. Teaches fundamentals of programming and more advanced topics. Emphasizes algorithmic thinking and computational problem solving and provides an introduction to the concepts and methods used in Computer Science. Required for all CSC majors.
CSC 172|Data Structures and Algorithms|1|4.0|Eustrat Zhupa|Abstract data types (e.g., sets, mappings, and graphs) and their implementation as concrete data structures in Java. Analysis of the running times of programs operating on such data structures, and basic techniques for program design, analysis, and proof of correctness (e.g., induction and recursion). Lab and workshop required. Prerequisites: CSC 171 or equivalent, MTH 150.
CSC 173|Computation and Formal Systems|1|4.0|George Ferguson|Investigation of several formal systems influential in computer science, and also some of their applications (e.g. inspiring and providing the foundation for a computer programming style, or providing the basis for solving important practical problems like communications protocols, compiling, systems analysis, graphics ...) This course is available to majors only during the registration period. Prerequisites: CSC 172 and MTH 150.
CSC 210|Web Programming|1|4.0|Robert Kostin|The World Wide Web was born around 1990, so it is not much older than most of you. In this course, we will follow the growth of the Web from its toddler years, to early childhood, to its turbulent pre-teen and teenage years, and finally as it begins to mature as a young adult. Along this journey, you will learn influential Web technologies such as HTTP, HTML, JavaScript, CSS, the LAMP stack, XML, JSON, Ajax, WebSockets, and modern MVC frameworks. Even though you will be doing a lot of programming in this course, its purpose is not to teach you to become an expert in any particular language or framework. Web technologies change at a blistering pace, so specifics quickly get outdated. However, once you take this course and understand the fundamentals, you will be able to easily pick up new technologies on the fly. *No audits will be allowed for this course. Prerequisites: CSC 172
CSC 211|Introduction to HCI|1|4.0|Zhen Bai|The goal of this course is to provide an introductory overview of the concepts, principles, methods and special topics of Human-Computer Interaction (HCI). This course will help students to build a frame of reference of HCI approaches and apply them in conducting design practices for real-world problems. This course contains a combination of lectures, seminars and group projects. The lectures will cover origins of HCI and interaction design, user-centered design methods, usability evaluation and user experience. The seminars will be a combination of guest lecturers and student-led discussions to introduce special topics in HCI, which may include Augmented and Virtual Reality, Tangible User Interface, Human-Robot Interaction, learning technologies, and assistive technologies. The group project will take place throughout the course and provide an opportunity for students to apply and reflect on HCI methods and user-centered design processes through contextual inquiry, prototyping, evaluation, iteration and presentation. Prerequisites: CSC 172. CSC 214 is recommended.
CSC 214|Mobile App Development|1|4.0|Arthur Roolfs|Coursework covers user interface designs and functional algorithms for mobile devices (iOS fall, Android spring) and unique user interactions using multi-touch technologies. Object-oriented design using model-view-controller paradigm, memory management. Other topics include: object-oriented database API, animation, multi-threading and performance considerations. Prerequisites: CSC 172
CSC 229|Computer Models of Perception and Cognition|1|4.0|Robert Jacobs|How can computer models help us understand how people perceive and reason about their environments? This course addresses this question, with emphasis placed on how people use probabilistic reasoning in order to represent and manage ambiguity and uncertainty for the purpose of making intelligent decisions. The course is relevant to students with interests in computational studies of human perception and cognition, and to students with interests in artificial intelligence. Homework assignments will require students to write computer programs using the Python programming language.Prerequisites: MATH 161, MATH 162, and CSC 161 (or equivalent proficiency in Python programming) required. MATH 164, MATH 165, and/or STAT 213 are helpful but not required.
CSC 240|Data Mining|1|4.0|Thaddeus Pawlicki|Fundamental concepts and techniques of data mining, including data attributes, data visualization, data pre-processing, mining frequent patterns, association and correlation, classification methods, and cluster analysis. Advanced topics include outlier detection, stream mining, and social media data mining. CSC 440, a graduate-level course, requires additional readings and a course project. Prerequisites will be strictly enforced: CSC171, CSC 172 and MTH 161. Recommended: CSC 242 or CSC262; MTH165.
CSC 242|Artificial Intelligence|1|4.0|George Ferguson|Introduces fundamental principles and techniques from Artificial Intelligence, including heuristic search, automated reasoning, handling uncertainty, and machine learning, to prepare students for advanced AI courses. This course is available to majors only during the registration period. Prerequisites: CSC 172 and MTH 150; CSC 173 STRONGLY Recommended.
CSC 244|Knowledge Rep and Reason in Ai|1|4.0|Lenhart Schubert|The logical foundations of AI including first-order logic, reasoning, knowledge representation, planning, and probabilistic inference.
CSC 248|Stat Speech and Lang Processing|1|4.0|Daniel Gildea|An introduction to statistical natural language processing and automatic speech recognition techniques. This course presents the theory and practice behind the recently developed language processing technologies that enable applications such as speech-driven dictation systems, document search engines (e.g., finding web pages) and automatic machine translation. Students taking this course at the 400 level will be required to complete additional readings and/or assignments. Prerequisites: CSC 172 and CSC 242.
CSC 249|Machine Vision|1|4.0|Chenliang Xu|Introduction to computer vision, including camera models, basic image processing, pattern and object recognition, and elements of human vision. Specific topics include geometric issues, statistical models, Hough transforms, color theory, texture, and optic flow. CSC 449, a graduate-level course, requires additional readings and assignments.Prerequisites: MTH 161 and CSC 242; MTH 165 strongly recommended
CSC 252|Computer Organization|1|4.0|Sandhya Dwarkadas|Introduction to computer architecture and the layering of hardware/software systems. Topics include instruction set design; logical building blocks; computer arithmetic; processor organization; the memory hierarchy (registers, caches, main memory, and secondary storage); I/Obuses, devices, and interrupts; microcode and assembly language; virtual machines; the roles of the assembler, linker, compiler, and operating system; technological trends and the future of computing hardware. Several programming assignments required. Prerequisites: MTH 150 and CSC 172
CSC 253|Collaborative Programming and Software Design|1|4.0|Chen Ding|Modern software is complex and more than a single person can fully comprehend. This course teaches the principles and techniques of writing modular and composable code and collaborating with others in software design. The topics include advanced concepts and techniques in modern programming languages, principles of modularity, software architecture, design patterns, software development processes, and other examples of software design. A significant portion of the assignment is a group project to develop a groupware system. Students enrolled in the class are expected to already have significant programming experience in some languages. The programming languages used in lectures are mainly Ruby and Haskell. Prerequisites: CSC 172, or equivalent. CSC 252 and CSC 254 recommended.
CSC 254|Programming Language Design and Implementation|1|4.0|Michael Scott|Design and implementation of programming languages, with an emphasis on imperative languages and on implementation tradeoffs. In-depth examination of 'how programming languages work.' Topics include fundamental language concepts (names, values, types, abstraction, control flow); compilation and interpretation (syntactic and semantic analysis, code generation and optimization); major language paradigms (imperative, object-oriented, functional, logic-based, concurrent). Course projects include assignments in several different languages, with an emphasis on compilation issues. Prerequisites: CSC 173 and CSC 252, or equivalent.
CSC 256|Operating Systems|1|4.0|John Criswell|Principles of operating system design, explored within the practical context of traditional, embedded, distributed, and real-time operating systems. Topics include device management, process management, scheduling, synchronization principles, memory management and virtual memory, file management and remote files, protection and security, fault tolerance, networks, and distributed computing. CSC 456, a graduate-level course, requires additional readings and assignments. Prerequisites: CSC 252 or ECE 200.
CSC 257|Computer Networks|1|4.0|Adam Purtee|Introduction to computer networks and computer communication: Architecture and Protocols:. Design of protocols for error recovery, reliable delivery, routing and congestion control. Store-and-forward networks, satellite networks, local area networks and locally distributed systems. Case studies of networks, protocols and protocol families. Emphasis on software design issues in computer communication. Prerequisites: CSC 252
CSC 261|Database Systems|1|4.0|Eustrat Zhupa|This course presents the fundamental concepts of database design and use. It provides a study of data models, data description languages, and query facilities including relational algebra and SQL, data normalization, transactions and their properties, physical data organization and indexing, security issues and object databases. It also looks at the new trends in databases. The knowledge of the above topics will be applied in the design and implementation of a database application using a target database management system as part of a semester-long group project. Prerequisites: CSC 172; CSC 173 and CSC 252 recommended.
CSC 262|Computational Introduction to Statistics|1|4.0|Joseph Ciminelli|This course will cover foundational concepts in descriptive analyses, probability, and statistical inference. Topics to be covered include data exploration through descriptive statistics (with a heavy emphasis on using R for such analyses), elementary probability, diagnostic testing, combinatorics, random variables,  elementary distribution theory, statistical inference, and statistical modeling. The inference portion of the course will focus on building and applying hypothesis tests and confidence intervals for population means, proportions, variances, and correlations. Non-parametric alternatives will also be introduced. The modeling portion of the course will include ANOVA, and simple and multiple regression and their respective computational methods. Students will be introduced to the R statistical computing environment. PREREQUISITES: MTH 150 or MTH 150A; AND MTH 142 or MTH 161 or MTH 171WAITLIST: If registration is full, submit your info to our Fall 2020 waitlist at: https://forms.gle/yc8u4rs5raBoeW2V7
CSC 264|Computer Audition|1|4.0|Andrea Cogliati|This course is cross-listed with ECE477. Please refer to ECE 477 for the course description.
CSC 273W|Writing for Computer Science|1|2.0|Joseph Loporcaro|In this course, students prepare, critique, and discuss written materials relevant to Computer Science. Will count as one of the two upper level writing requirements for Computer Science majors. If the course is closed, DO NOT email the professor.
CSC 280|Computer Models and Limitations|1|4.0|Eustrat Zhupa|This course studies fundamental computer models and their computational limitations. Finite-state machines and pumping lemmas, the context-free languages, Turing machines, decidable and Turing-recognizable languages, undecidability. Prerequisites include CSC 173 and MTH 150.
CSC 282|Design and Analysis Efficent Alg|1|4.0|Daniel Stefankovic|How does one design programs and ascertain their efficiency? Greedyalgorithms, dynamic programming, divide-and-conquer techniques, stringprocessing, graph algorithms, mathematical algorithms. Introduction toNP-completeness and linear programming. Students taking this course atthe 400 level may be required to complete additional tests, readingsor assignments.Prerequisites: (CSC 172 and MTH 150) or MTH172.
CSC 287|Sampling Algorithms|1|4.0|Daniel Stefankovic|The course will focus on algorithmic sampling from probabilitydistributions using Markov chains, perfect sampling methods (coupling from the past, Lovasz Local Lemma), determinantal techinques (spanning trees, matchings in planar graphs), and using correlation decay. For MCMC we will study methods to bound convergence speed (coupling, canonical paths, conductance, log-concavity) and show how they apply to classical problems (colorings, permanent, volume, matroids). Background material on probability theory will be covered.
CSC 292|Mobile Vision Computing|1|4.0|Yuhao Zhu|Addressing the world's more pressing issues such as environmental sustainability and cultural heritage preservation increasingly relies on diverse visual applications running on emerging platforms such as Augmented/Virtual Reality headsets, autonomous machines, and smart sensor nodes. In real-time and using low power, visual computing systems must generate visual data forhuman to consume, immersively, or interpret visual data to provide personalized services, intelligently.In this class, we will first study fundamental building blocks for visual computing such as real-time computer vision, computer graphics, deep learning, image sensing, and optics. We will then explore application domains that build on top of these fundamental building blocks such as AR/VR, computational photography/imaging, robotics, and self-driving cars.The course will necessarily span many important layers of a computer system, including application development, programming language and framework, compiler, OS, and hardware architecture.This class will combine instructor-led lectures, student-led in-class presentations, paper reading/critiquing, and the fun "wild and crazy" paper writing.
CSC 299|Social Implications of Computing|1|4.0|Joseph Loporcaro|Computers and the Internet, perhaps more than any other technology, have transformed society over the past 50 years.  In developed nations, at least, they have enabled dramatic increases in human productivity; an explosion of options for news, entertainment, and communication; and fundamental breakthroughs in almost every branch of science and engineering.  At the same time, they have contributed to unprecedented threats to privacy; whole new categories of crime and anti-social behavior; major disruptions in the job market; and the large-scale concentration of risk into systems capable of catastrophic failure.  In this discussion- and writing-oriented class, we will consider all of this and more, with the goal of better understanding how to shape technological change in ways that maximize the benefits and minimize the costs.
CSC 390|Supervised Teaching: CSC 161-WSL|1|1.0|Richard Sarkis|Blank Description
CSC 393|Senior Project|1|4.0|Jiebo Luo|Blank Description
CSC 394|Internship|1|4.0|Yuhao Zhu|Blank Description
CSC 413|Introduction to Augmented and Virtual Reality|1|4.0|Mujdat Cetin|This course provides a broad introduction to augmented and virtual reality (AR/VR) systems. The course involves lectures covering an overview of all aspects of the AR/VR domain, as well as individual work performed by each student aimed at providing more intensive training on various aspects of AR/VR. Topics covered in the lectures include history, conceptual origins, and design/evaluation principles of AR/VR technologies; overview of visual/auditory/haptic AR/VR interfaces and applications; visual perception; optics/platforms/sensors/displays; auditory perception and spatial audio; silicon hardware architecture and materials; graphics and computation; interfaces and user experience design; data processing and machine intelligence for AR/VR; introduction to AR/VR programming tools; societal implications and ethical aspects. At the end of the course, students will have gained familiarity with the techniques, languages, and cultures of fields integral to the convergent research theme of AR/VR. This course is co-instructed by Mujdat Cetin, Michele Rucci, Ross Maddox, Jannick Rolland,  Yuhao Zhu, Andrew White, Chenliang Xu, and Zhen Bai.
CSC 440|Data Mining|1|4.0|Jiebo Luo|Fundamental concepts and techniques of data mining, including data attributes, data visualization, data pre-processing, mining frequent patterns, association and correlation, classification methods, and cluster analysis. Advanced topics include outlier detection, stream mining, and social media data mining. CSC 440, a graduate-level course, requires additional readings and a course project.
CSC 442|Artificial Intelligence|1|4.0|Adam Purtee|Introduces fundamental principles and key applications of artificial intelligence, including heuristic search, automated reasoning, machine learning, neural networks and machine perception. Programming project include building autonomous software agenst in a virtual world. This course is a prerequisite for advanced AI courses
CSC 444|Knowledge Rep and Reason in Ai|1|4.0|Lenhart Schubert|The logical foundations of AI including first-order logic, reasoning, knowledge representation, planning, and probabilistic inference.
CSC 448|Stat Speech and Lang Processing|1|4.0|Daniel Gildea|An introduction to statistical natural language processing and automatic speech recognition techniques. This course presents the theory and practice behind the recently developed language processing technologies that enable applications such as speech-driven dictation systems, document search engines (e.g., finding web pages) and automatic machine translation. Students taking this course at the 400 level will be required to complete additional readings and/or assignments.
CSC 449|Machine Vision|1|4.0|Chenliang Xu|Introduction to computer vision, including camera models, basic image processing, pattern and object recognition, and elements of human vision. Specific topics include geometric issues, statistical models, Hough transforms, color theory, texture, and optic flow. CSC 449, a graduate-level course, requires additional readings and assignments.Prerequisites: MTH 161 and CSC 242; MTH 165 strongly recommended
CSC 452|Computer Organization|1|4.0|Sandhya Dwarkadas|Introduction to computer architecture and the layering of hardware/software systems. Topics include instruction set design; logical building blocks; computer arithmetic; processor organization; the memory hierarchy (registers, caches, main memory, and secondary storage); I/Obuses, devices, and interrupts; microcode and assembly language; virtual machines; the roles of the assembler, linker, compiler, and operating system; technological trends and the future of computing hardware. Several programming assignments required.
CSC 453|Collaborative Programming and Software Design|1|4.0|Chen Ding|Modern software is complex and more than a single person can fully comprehend. This course teaches the principles and techniques of writing modular and composable code and collaborating with others in software design. The topics include advanced concepts and techniques in modern programming languages, principles of modularity, software architecture, design patterns, software development processes, and other examples of software design. A significant portion of the assignment is a group project to develop a groupware system. Students enrolled in the class are expected to already have significant programming experience in some languages. The programming languages used in lectures are mainly Ruby and Haskell. Prerequisites: CSC 252 and CSC 254, or equivalent.
CSC 454|Prog Language Design and Imp.|1|4.0|Michael Scott|Design and implementation of programming languages, with an emphasis on imperative languages and on implementation tradeoffs. In-depth examination of 'how programming languages work.' Topics include fundamental language concepts (names, values, types, abstraction, control flow); compilation and interpretation (syntactic and semantic analysis, code generation and optimization); major language paradigms (imperative, object-oriented, functional, logic-based, concurrent). Course projects include assignments in several different languages, with an emphasis on compilation issues.Prerequisites: CSC 173 and 252, or equivalent.
CSC 456|Operating Systems|1|4.0|John Criswell|Principles of operating system design, explored within the practical context of traditional, embedded, distributed, and real-time operating systems. Topics include device management, process management, scheduling, synchronization principles, memory management and virtual memory, file management and remote files, protection and security, fault tolerance, networks, and distributed computing. CSC 456, a graduate-level course, requires additional readings and assignments.
CSC 457|Computer Networks|1|4.0|Adam Purtee|Introduction to computer networks and computer communication: Architecture and Protocols:. Design of protocols for error recovery, reliable delivery, routing and congestion control. Store-and-forward networks, satellite networks, local area networks and locally distributed systems. Case studies of networks, protocols and protocol families. Emphasis on software design issues in computer communication.
CSC 461|Database Systems|1|4.0|Eustrat Zhupa|This course presents the fundamental concepts of database design and use. It provides a study of data models, data description languages, and query facilities including relational algebra and SQL, data normalization, transactions and their properties, physical data organization and indexing, security issues and object databases. It also looks at the new trends in databases. The knowledge of the above topics will be applied in the design and implementation of a database application using a target database management system as part of a semester-long group project.
CSC 462|Computational Introduction to Statistics|1|4.0|Joseph Ciminelli|This course will cover foundational concepts in descriptive analyses, probability, and statistical inference. Topics to be covered include data exploration through descriptive statistics (with a heavy emphasis on using R for such analyses), elementary probability, diagnostic testing, combinatorics, random variables,  elementary distribution theory, statistical inference, and statistical modeling. The inference portion of the course will focus on building and applying hypothesis tests and confidence intervals for population means, proportions, variances, and correlations. Non-parametric alternatives will also be introduced. The modeling portion of the course will include ANOVA, and simple and multiple regression and their respective computational methods. Students will be introduced to the R statistical computing environment. PREREQUISITES: MTH 150 or MTH 150A; AND MTH 142 or MTH 161 or MTH 171WAITLIST: If registration is full, submit your info to our Fall 2020 waitlist at: https://forms.gle/yc8u4rs5raBoeW2V7
CSC 464|Computer Audition|1|4.0|Andrea Cogliati|Please refer to ECE 477 for course description.
CSC 480|Computer Models and Limitations|1|4.0|Eustrat Zhupa|This course studies fundamental computer models and their computational limitations. Finite-State machines and pumping lemmas, the context-free languages, Turing machines, decidable and Turing-recognizable languages , undecidability.Prerequisites: CSC 173 and MTH 150.
CSC 482|Design and Analysis Efficent Alg|1|4.0|Daniel Stefankovic|How does one design programs and ascertain their efficiency? Divide-and-conquer techniques, string processing, graph algorithms, mathematical algorithms. Advanced data structures such as balanced tree schemes. Introduction to NP-completeness and intractable combinatorial search, optimization, and decision problems.Prerequisites: (CSC 172 and MTH 150) or MTH172.
CSC 487|Sampling Algorithms|1|4.0|Daniel Stefankovic|The course will focus on algorithmic sampling from probability distributions using Markov chains, perfect sampling methods (coupling from the past, Lovasz Local Lemma), determinantal techinques (spanning trees, matchings in planar graphs), and using correlation decay. For MCMC we will study methods to bound convergence speed (coupling, canonical paths, conductance, log-concavity) and show how they apply to classical problems (colorings, permanent, volume, matroids). Background material on probability theory will be covered.
CSC 572|Mobile Vision Computing|1|4.0|Yuhao Zhu|Addressing the world's more pressing issues such as environmental sustainability and cultural heritage preservation increasingly relies on diverse visual applications running on emerging platforms such as Augmented/Virtual Reality headsets, autonomous machines, and smart sensor nodes. In real-time and using low power, visual computing systems must generate visual data forhuman to consume, immersively, or interpret visual data to provide personalized services, intelligently. In this class, we will first study fundamental building blocks for visual computing such as real-time computer vision, computer graphics, deep learning, image sensing, and optics. We will then explore application domains that build on top of these fundamental building blocks such as AR/VR, computational photography/imaging, robotics, and self-driving cars.The course will necessarily span many important layers of a computer system, including application development, programming language and framework, compiler, OS, and hardware architecture.This class will combine instructor-led lectures, student-led in-class presentations, paper reading/critiquing, and the fun "wild and crazy" paper writing.
CSC 575|Special Topics in Human-Centered AI|1|4.0|Ehsan Hoque|Living with pandemics: can AI help mitigate?A few months ago, no one knew of SARS-CoV2. Now the virus has disrupted modern society on an unimaginable scale. Like WWW2 or the 9/11 attacks, the pandemic is having a permanent imprint on the world’s psyche. In this class, we will try to understand the network topologies of how this phenomenon spread, its current impact in our society and possible mitigation strategies through the lens of Artificial Intelligence. We will study new considerations in telemedicine (people trying to care for elderly relatives without exposing them to the virus), online learning (stresses on parents thrust into home-schooling their kids, the transformation of academic institutions creating online classes), location tracking apps that prioritize users privacy, mental health (how does our design ensure social distances when needed while promoting social connectedness),  and consequences of the global inequality in healthcare. Students will work on a semester-long project with new CoV2 datasets answering novel research questions.  Prerequisite: CSC 242, CSC 246This is a seminar course on varying topics related to Human Computer Interaction. This course may not be offered every year.
CSC 576|Adv Topics in Data Management|1|4.0|Fatemeh Nargesian|Data is everywhere: Web data, dark data, open data, and more . A grand challenge of data management systems is to make the fast-growing (heterogeneous) data actionable for data science, advanced analytics, and query answering. To that end, this course studies classic and emerging topics in data management including data-related challenges of data science, data discovery and integration, Web data management, and knowledge base instruction. The course also briefly explores the research related to the issues of fairness in data management. The course will be a mix of lectures, student presentations, round table discussions, a semester-long research project, and paper writing. Ultimately, this course aims to engage students in creative thinking and problem solving, and familiarize students with how data management research is conducted. Prerequisites: CSC 461 (or equivalent course) or permission of the instructor.
CSC 162|Data Structures and Algorithms in Python|4|4.0|Alan Beadle|Computers are universal tools to store and process information. The storage part is organized as data structures; the processing part is captured as algorithms. Together, these form the heart of every computer application (in science, government, business, and the arts), on every kind of information (pictures, numbers, sound, and text). We will study the most fundamental data structures and algorithms as a means of using computers more effectively, and as preparation for more advanced study in CS and related fields.
CSC 174|Adv Front End Web Developmnt|1|4.0|Robert Kostin|"Front-end" is an industry term that refers to the focus on HTML, CSS and JavaScript, which differentiates this course from the formal programming courses. Topics include information architecture, visual design, and use of client libraries (mostly JS); we will also cover Content Management Systems and introduce web databases using PHP and MySQL. If the course is closed, DO NOT email the professor. Prerequisite: CSC 170
CSC 191|Machines and Consciousness|1|4.0|Lenhart Schubert|Can machines show self-awareness? Could robots and other machines have subjective sensory and emotional experiences? Could they have a moral sense? These questions are becoming increasingly relevant in our age of increasingly intelligent machines. We will explore these issues through readings from the AI literature as well as from philosophy and cognitive science. Homework will include written answers to questions, essays, 2 Lisp exercises and -- for 291 students only -- a team programming project intended to demonstrate the possibility of some degree of self-awareness in a computer. The course is optionally available for writing credit.
CSC 200|Undergraduate Problem Seminar|1|4.0|Chen Ding|Intensive seminar on cooperative problem solving. Overview of the subdisciplines and the research of the University of Rochester’s computer science faculty.  Instruction and practice on research methodology and procedures.  Students taking CSC 200H may have additional reading, assignments or projects. 200H is required for the Honors B.S. in Computer Science.Students who participate or intend to participate in research are well advised to take CSC 200/200H.The topic may vary from year to year, and the spring 2021 offering has an additional focus on program correctness.  It is not just "the programmer's responsibility to produce a correct program but also to demonstrate its correctness in a convincing manner." (Dijkstra)   The material includes type systems, program safety, deductive logic, and machine-checked proofs.  It includes theory, i.e. the Curry-Howard correspondence, and practice, i.e. programming in Rust and Coq.
CSC 200H|Honors Undergraduate Problem Seminar|1|4.0|Chen Ding|Intensive seminar on cooperative problem solving. Overview of the subdisciplines and the research of the University of Rochester’s computer science faculty.  Instruction and practice on research methodology and procedures.  Students taking CSC 200H may have additional reading, assignments or projects. 200H is required for the Honors B.S. in Computer Science.Students who participate or intend to participate in research are well advised to take CSC 200/200H.The topic may vary from year to year, and the spring 2021 offering has an additional focus on program correctness.  It is not just "the programmer's responsibility to produce a correct program but also to demonstrate its correctness in a convincing manner." (Dijkstra)   The material includes type systems, program safety, deductive logic, and machine-checked proofs.  It includes theory, i.e. the Curry-Howard correspondence, and practice, i.e. programming in Rust and Coq. CSC 200H students propose and complete a final project in cooperative problem solving in an area of computer science research.  They are required to attend computer science department colloquiums when their schedule permits.
CSC 212|Human Computer Interaction|1|4.0|Ehsan Hoque|The course will explore the design, implementation, and evaluation of user-driven prototypes to be used by real users. Students will study the theoretical methods for design and evaluation, including requirements gathering, survey design, ethnography, rapid prototyping, and evaluation techniques. The theoretical knowledge will be supplemented with hands-on group projects including a final project. The final project will involve interactions with real-users along with a working prototype which hopefully could be deployed and used by people beyond the scope of this course.Prerequisites: CSC 172 and CSC 242.
CSC 241|Topics in Computational Neuroscience|1|4.0|Ralf Haefner|Blank Description
CSC 246|Machine Learning|1|4.0|Adam Purtee|Mathematical foundations of classification, regression, and decisionmaking. Perceptron algorithm, logistic regression, and support vector machines. Numerical parameter optimization, including gradientdescent and quasi-Newton methods. Expectation Maximization. Hidden Markov models and reinforcement learning. Principal Components Analysis. Learning theory including VC-dimension and PAC learning guarantees. Prerequisites: MATH 164 and MATH 165, CSC 242 (and therefore CSC 172) strongly recommended.
CSC 247|Natural Language Processing|1|4.0|James Allen|This course addresses issues of representing computing meaning from natural language, especially issues of understanding language in context using commonsense knowledge of the world. Topics will include a survey of English phrase structure and parsing, semantic representation (e.g., events, semantic roles, time, causality and speech acts), and theories and techniques for understanding language in context, including intention recognition, text understanding using knowledge of scripts and plans, and models of spoken dialogue systems (e.g., conversational agents such as Siri). CSC447, the graduate level version of the course, requires a substantial individual project. Prerequisite: CSC 242
CSC 255|Software Analysis and Improv|2|4.0|Sreepathi Pai|Programming is the automation of information processing. Program analysis and transformation is the automation of programming itself---how much a program can understand and improve other programs. Because of the diversity and complexity of computer hardware, programmers increasingly depend on automation in compilers and other tools to deliver efficient and reliable software. This course combines fundamental principles and (hands-on) practical applications. Specific topics include data flow and dependence theories; static and dynamic program transformation including parallelization; memory and cache management; type checking and program verification; and performance analysis and modeling. The knowledge and practice will help students to become experts in software performance and correctness. Students taking the graduate level will have additional course requirements and a more difficult project. Prerequisites: CSC 254; CSC 252 recommended
CSC 258|Parallel and Distributed Systems|1|4.0|Sandhya Dwarkadas|Principles of parallel and distributed systems, and the associated implementation and performance issues. Topics covered will include programming interfaces to parallel and distributed computing, interprocess communication, synchronization, and consistency models, fault tolerance and reliability, distributed process management, distributed file systems, multiprocessor architectures, parallel program optimization, and parallelizing compilers. Students taking this course at the 400 level will be required to complete additional readings and/or assignments. Prerequisites: CSC 252 and (CSC 254 or CSC 256) or instructor permission
CSC 263|Data Management Systems|1|4.0|Fatemeh Nargesian|This course explores the internals of data engines. Topics covered will include the relational model; relational database design principles based on dependencies and normal forms; query execution; transactions; recovery; query optimization; parallel query processing; NoSQL.  Prerequisites:CSC 173 and CSC 252 (or CSC 261)
CSC 265|Intermed Statistical Methods|1|4.0|Yusuf Bilgic|This course is a continuation of DSCC/CSC 262, covering intermediate statistical methodology and related computational methods, with an emphasis on the R statistical computing environment.PREREQUSITE: DSCC 262/CSC 262 (preferred). STT 212 or STT 213 also permitted.
CSC 278|Computer Security Foundations|1|4.0|John Criswell|This course will teach students the foundations of computer security. Students will learn what security is, the design principles of secure systems, how security is enforced, and how security is compromised. Topics include access controls, information flow, basic applications of cryptography, buffer overflow attacks, and malware. Prerequisites: CSC 252
CSC 281|Introduction to Cryptography|1|4.0|Muthuramakrishnan Venkitasubramaniam|The modern study of cryptography investigates techniques for facilitating interactions between distrustful entities. In this course we introduce some of the fundamental concepts of this study. Emphasis will be placed on the foundations of cryptography and in particular on precise definitions and proof techniques.(MTH 150 or MTH 162), AND (CSC 171 or prior programming experience)
CSC 286|Computational Complexity|1|4.0|Lane Hemaspaandra|The difference between computable and uncomputable problems andbetween feasible and infeasible problems. Regarding the latter, what properties of a problem make it computationally simple? What properties of a problem may preclude its having efficient algorithms? How computationally hard are problems? Complete sets and low information content; P=NP?; unambiguous computation and one-way functions; reductions relating the complexity of problems; complexity classes and hierarchies. Prerequisite: CSC 280
CSC 291|Machines and Consciousness|1|4.0|Lenhart Schubert|Can machines show self-awareness? Could robots and other machines have subjective sensory and emotional experiences? Could they have a moral sense? These questions are becoming increasingly relevant in our age of increasingly intelligent machines. We will explore these issues through readings from the AI literature as well as from philosophy and cognitive science. Homework will include written answers to questions, essays, 2 Lisp exercises and -- for 291 students only -- a team programming project intended to demonstrate the possibility of some degree of self-awareness in a computer. The course is optionally available for writing credit.  Prerequisites: CSC 173 and one or more of 240, 242, 280 , or 282.
CSC 295|Quantum Computing Seminar|1|4.0|Thaddeus Pawlicki|This course covers special topics that are of current interest in the area of Quantum Computing. Topics vary by term.
CSC 299W|W Social Implications of Computing|1|4.0|Joseph Loporcaro|Computers and the Internet, perhaps more than any other technology, have transformed society over the past 50 years. In developed nations, at least, they have enabled dramatic increases in human productivity; an explosion of options for news, entertainment, and communication; and fundamental breakthroughs in almost every branch of science and engineering. At the same time, they have contributed to unprecedented threats to privacy; whole new categories of crime and anti-social behavior; major disruptions in the job market; and the large-scale concentration of risk into systems capable of catastrophic failure. In this discussion- and writing-oriented class, we will consider all of this and more, with the goal of better understanding how to shape technological change in ways that maximize the benefits and minimize the costs. This course will be asynchronous. CSC299 can be taken as a ULW or not.
CSC 400|Problem Seminar|1|2.0|Michael Scott|An introduction to the technical, social, economic, and political aspects of graduate education in computer science at Rochester. Class meetings consist primarily of group discussions and presentations that focus on a broad range of topics, and are intended to improve the critical analysis, technical writing, presentation, and problem-solving skills of students. Both class discussions and written assignments are drawn from material presented in other first-year graduate courses offered within the department. The course also offers a forum for individual department faculty members to discuss their research interests and recent results. Satisfactory performance is required of all first-year graduate students.
CSC 404|Multiprocessor Arch|1|4.0|Michael Huang|This course provides in-depth discussions of the design and implementation issues of multiprocessor system architecture. Topics include cache coherence, memory consistency, interconnect, their interplay and impact on the design of high-performance micro-architectures. prerequisiteECE 200 or CSC 252 or permission of instructor
CSC 412|Human Computer Interaction|1|4.0|Ehsan Hoque|This course will explore the design, implementation, and evaluation of user interfaces. Students will study the theoretical methods for interface design and evaluation, including requirements gathering, usability heuristics, user interface inspections, usability studies, information visualization, and prototyping. Case studies of interface successes and failures will augment theory with practical experiences. Students will apply this methodology to assignments in the design, implementation, and evaluation cycle. Students taking this course at the graduate level will have additional readings and assignments.
CSC 443|Topics in Computational Neuroscience|1|4.0|Ralf Haefner|This course is cross-listed with BCS 547. Please refer to that course description.
CSC 446|Machine Learning|1|4.0|Daniel Gildea|This course presents the mathematical foundations of AI, including probability, decision theory and machine learning. Prerequisites: MATH 164 and MATH 165
CSC 447|Natural Language Processing|1|4.0|James Allen|This course addresses issues of representing computing meaning from natural language, especially issues of understanding language in context using commonsense knowledge of the world. Topics will include a survey of English phrase structure and parsing, semantic representation (e.g., events, semantic roles, time, causality and speech acts), and theories and techniques for understanding language in context, including intention recognition, text understanding using knowledge of scripts and plans, and models of spoken dialogue systems (e.g., conversational agents such as Siri). CSC447, the graduate level version of the course, requires a substantial individual project.Prerequisites: CSC 242
CSC 455|Software Analysis and Improv|2|4.0|Sreepathi Pai|Programming is the automation of information processing. Program analysis and transformation is the automation of programming itself---how much a program can understand and improve other programs. Because of the diversity and complexity of computer hardware, programmers increasingly depend on automation in compilers and other tools to deliver efficient and reliable software. This course combines fundamental principles and (hands-on) practical applications. Specific topics include data flow and dependence theories; static and dynamic program transformation including parallelization; memory and cache management; type checking and program verification; and performance analysis and modeling. The knowledge and practice will help students to become experts in software performance and correctness. Students taking the graduate level will have additional course requirements and a more difficult project.
CSC 458|Parallel and Distributed Systems|1|4.0|Sandhya Dwarkadas|Principles of parallel and distributed systems, and the associated implementation and performance issues. Topics covered will include programming interfaces to parallel and distributed computing, interprocess communication, synchronization, and consistency models, fault tolerance and reliability, distributed process management, distributed file systems, multiprocessor architectures, parallel program optimization, and parallelizing compilers. Students taking this course at the 400 level will be required to complete additional readings and/or assignments.
CSC 463|Data Management Systems|1|4.0|Fatemeh Nargesian|This course explores the internals of data engines. Topics covered will include the relational model; relational database design principles based on dependencies and normal forms; query execution; transactions; recovery; query optimization; parallel query processing; NoSQL.
CSC 465|Intermed Statistical Methods|1|4.0|Yusuf Bilgic|This course is a continuation of DSCC/CSC 462, covering intermediate statistical methodology and related computational methods, with an emphasis on the R statistical computing environment.PREREQUISITE: DSCC/CSC/TCSC 262 or instructor permission of equivalent coursework
CSC 478|Computer Security Foundations|1|4.0|John Criswell|This course will teach students the foundations of computer security. Students will learn what security is, the design principles of secure systems, how security is enforced, and how security is compromised. Topics include access controls, information flow, basic applications of cryptography, buffer overflow attacks, and malware.
CSC 481|Introduction to Cryptography|2|4.0|Muthuramakrishnan Venkitasubramaniam|The modern study of cryptography investigates techniques for facilitating interactions between distrustful entities. In this course we introduce some of the fundamental concepts of this study. Emphasis will be placed on the foundations of cryptography and in particular on precise definitions and proof techniques.(MTH 150 or MTH 162), AND (CSC 171 or prior programming experience)
CSC 486|Computational Complexity|1|4.0|Lane Hemaspaandra|The difference between computable and uncomputable problems and between feasible and infeasible problems. Regarding the latter, what properties of a problem make it computationally simple? What properties of a problem may preclude its having efficient algorithms? How computationally hard are problems? Complete sets and low information content; P=NP?; unambiguous computation and one-way functions; reductions relating the complexity of problems; complexity classes and hierarchies. Prerequisites: CSC 280
CSC 577|Advanced Topics in Computer Vision|1|4.0|Chenliang Xu|This is a seminar course with varying topics in the area of artificial Intelligence. May not be taught every year.This course covers advanced research topics in computer vision with an emphasis on learning structured representations and embeddings. Approaches for learning from unimodal (e.g., images and videos), and multimodal data (e.g., vision and language, vision and audio) will be covered and include topics from structured predications, deep learning and others. The course will be a mix of lecture, student presentation and discussion.
